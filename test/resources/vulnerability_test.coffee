Vunerability = require '../../app/resources/vulnerability'

validCVE = {
  id: 'CVE-2013-1164'
  summary: 'Cisco IOS XE 3.4 before 3.4.4S, 3.5, and 3.6 on 1000 series ASR'
  cpe: [
    'o:cisco:ios_xe:3.4.3s'
    'o:cisco:ios_xe:3.4.1s'
    'o:cisco:ios_xe:3.4.0s'
    'o:cisco:ios_xe:3.6.0s'
    'o:cisco:ios_xe:3.5.0s'
    'o:cisco:ios_xe:3.4.2s'
    'o:cisco:ios_xe:3.4.0as'
  ]
  date_created: '2013-04-11T06:55:01.873Z'
  date_updated: '2013-04-15T00:00:00.000Z'
  cvss: {
    score: 7.8
    access_vector: 'network'
    access_complexity: 'low'
    authentication: 'none'
    confidentiality_impact: 'none'
    integrity_impact: 'none'
    availability_impact: 'complete'
    source: 'http://nvd.nist.gov'
    date_created: '2013-04-11T09:55:00.000Z'
  }
  cwe: 'NVD-CWE-DesignError'
  references: [
    {
      type: 'vendor_advisory'
      lang: 'en'
      url: 'http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/asr1000'
      source: 'CISCO'
      title: '20130410 Multiple Vulnerabilities in Cisco IOS XE Software for 1000 Series ASR'
    }
  ]
}

invalidCVE = {
  id: 'A'
  summary: 3
  cpe: [
    9
  ]
  date_created: '2013-04-11'
  date_updated: '2013-04-15'
  cvss: {
    score: 11
    access_vector: 'physical'
    access_complexity: 'super'
    authentication: 'maybe'
    confidentiality_impact: 'maybe'
    integrity_impact: 'maybe'
    availability_impact: 'maybe'
    date_created: '2013-04-11'
  }
  cwe: 'CWE-DesignError'
  references: [
    {
      type: 'something'
      lang: 'english'
      url: 'tools.cisco.com'
      source: 3
      title: true
    }
  ]
}

describe 'Vunerability', ->
  it 'should have a default date_created', ->
    vuln = new Vunerability()
    expect(vuln)
      .to.have.property('date_created')
      .and.to.match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/)

  it 'shouldn\'t override a supplied date_created', ->
    vuln = new Vunerability {date_created: '2013-01-01T00:00:00.000Z'}
    expect(vuln)
      .to.have.property('date_created')
      .and.to.equal('2013-01-01T00:00:00.000Z')

  it 'should have a default date_updated', ->
    vuln = new Vunerability()
    expect(vuln)
      .to.have.property('date_updated')
      .and.to.match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/)

  it 'shouldn\'t override a supplied date_updated', ->
    vuln = new Vunerability {date_updated: '2013-01-01T00:00:00.000Z'}
    expect(vuln)
      .to.have.property('date_updated')
      .and.to.equal('2013-01-01T00:00:00.000Z')

  it 'should require fields', ->
    vuln = new Vunerability()
    validation = vuln.validate()
    expect(validation)
      .to.have.property('valid')
      .and.to.be.false
    expect(validation)
      .to.have.property('errors')
      .and.to.have.length(10)
    expectations =
      id: 'required'
      summary: 'required'
      score: 'required'
      access_vector: 'required'
      access_complexity: 'required'
      authentication: 'required'
      confidentiality_impact: 'required'
      integrity_impact: 'required'
      availability_impact: 'required'
      cpe: 'minItems'
    for error in validation.errors
      expect(error.attribute)
        .to.equal(expectations[error.property], error.property)

  it 'should accept valid data', ->
    vuln = new Vunerability validCVE
    validation = vuln.validate()
    expect(validation.valid)
      .to.be.true
 
  it 'should reject invalid data', ->
    vuln = new Vunerability invalidCVE
    validation = vuln.validate()
    expect(validation.valid)
      .to.be.false
    expect(validation)
      .to.have.property('errors')
      .and.to.have.length(19)
    expectations =
      summary: 'type'
      cpe: 'type'
      source: 'type'
      title: 'type'
      date_created: 'format'
      date_updated: 'format'
      url: 'format'
      score: 'maximum'
      type: 'enum'
      access_vector: 'enum'
      access_complexity: 'enum'
      authentication: 'enum'
      confidentiality_impact: 'enum'
      integrity_impact: 'enum'
      availability_impact: 'enum'
      cwe: 'pattern'
      lang: 'pattern'
      id: 'minLength'
    for error in validation.errors
      expect(error.attribute)
        .to.equal(expectations[error.property], error.property)

  it 'should upload on create', (done) ->
    app = require('../../app/app')
    app.storage.putObject.reset()
    
    Vunerability.create validCVE, (err, result) ->
      expect(err)
        .to.be.null
      expect(result)
        .to.be.not.null
      expect(app.storage.putObject)
        .to.be.calledOnce
      expect(app.storage.putObject)
        .to.be.calledWith \
          sinon.match({ Key: 'vulnerability/' + validCVE.id + '.json' }),
          sinon.match.func
      Vunerability.destroy validCVE.id, (err, result) ->
        expect(err)
          .to.be.null
        done()

  it 'should upload and invalidate on update', (done) ->
    app = require('../../app/app')
    
    Vunerability.create validCVE, (err, result) ->
      expect(err)
        .to.be.null
      expect(result)
        .to.be.not.null
        
      app.storage.putObject.reset()
      app.cdn.createInvalidation.reset()
      Vunerability.update validCVE.id, {}, (err, result) ->
        expect(app.storage.putObject)
          .to.be.calledOnce
        expect(app.storage.putObject)
          .to.be.calledWith \
            sinon.match({ Key: 'vulnerability/' + validCVE.id + '.json' }),
            sinon.match.func
        expect(app.cdn.createInvalidation)
          .to.be.calledOnce
        Vunerability.destroy validCVE.id, (err, result) ->
          expect(err)
            .to.be.null
          done()

  it 'should index on create', (done) ->
    app = require('../../app/app')
    
    app.index.createDocuments.reset()
    Vunerability.create validCVE, (err, result) ->
      expect(err)
        .to.be.null
      expect(result)
        .to.be.not.null
      expect(app.index.createDocuments)
        .to.be.calledOnce
        
      indexDocMatch = {
        docid: 'vulnerability/CVE-2013-1164'
        fields:
          timestamp: 1365984000
        categories:
          type: 'vulnerability'
          availability_impact: 'complete'
          vendor: ['cisco']
        variables:
          0: 7.8
      }
      expect(app.index.createDocuments)
        .to.be.calledWith \
          sinon.match.string,
          sinon.match(indexDocMatch),
          sinon.match.func
      Vunerability.destroy validCVE.id, (err, result) ->
        expect(err)
          .to.be.null
        done()

  it 'should index on update', (done) ->
    app = require('../../app/app')
    
    Vunerability.create validCVE, (err, result) ->
      expect(err)
        .to.be.null
      expect(result)
        .to.be.not.null
        
      app.index.createDocuments.reset()
      Vunerability.update validCVE.id, {}, (err, result) ->
        expect(app.index.createDocuments)
          .to.be.calledOnce
        indexDocMatch = {
          docid: 'vulnerability/CVE-2013-1164'
          fields:
            timestamp: 1365984000
          categories:
            type: 'vulnerability'
            availability_impact: 'complete'
            vendor: ['cisco']
          variables:
            0: 7.8
        }
        expect(app.index.createDocuments)
          .to.be.calledWith \
            sinon.match.string,
            sinon.match(indexDocMatch),
            sinon.match.func

        Vunerability.destroy validCVE.id, (err, result) ->
          expect(err)
            .to.be.null
          done()