resourceful = require 'resourceful'
restful = require 'restful'
util = require 'utile'
uuid = require 'node-uuid'
helpers = require '../util/resource_helpers'
CPEURI = require '../util/cpe_uri'

Vulnerability = module.exports = resourceful.define 'vulnerability', ->
  @restful = true
  @key = 'id'

  util.mixin @schema, {
    additionalProperties: false
    properties:
      id:
        type: 'string'
        required: true
        minLength: 13
        maxLength: 13
      summary:
        type: 'string'
        required: true
      cpe:
        type: 'array'
        items:
          type: 'string'
          required: true
          format: 'uri'
        minItems: 1
        uniqueItems: true
      date_created:
        type: 'string'
        required: true
        format: 'date-time'
      date_updated:
        type: 'string'
        required: true
        format: 'date-time'
      cvss:
        type: 'object'
        additionalProperties: false
        properties:
          score:
            type: 'number'
            required: true
            minimum: 0.0
            maximum: 10.0
          access_vector:
            type: 'string'
            required: true
            enum: ['local', 'adjacent_network', 'network']
          access_complexity:
            type: 'string'
            required: true
            enum: ['high', 'medium', 'low']
          authentication:
            type: 'string'
            required: true
            enum: ['multiple', 'single', 'none']
          confidentiality_impact:
            type: 'string'
            required: true
            enum: ['none', 'partial', 'complete']
          integrity_impact:
            type: 'string'
            required: true
            enum: ['none', 'partial', 'complete']
          availability_impact:
            type: 'string'
            required: true
            enum: ['none', 'partial', 'complete']
          date_created:
            type: 'string'
            format: 'date-time'
          source:
            type: 'string'
      cwe:
        type: 'string'
        pattern: /^(?:(?:NVD-CWE-[A-Z]+)|(?:CWE-[1-9][0-9]*))$/i
      references:
        type: 'array'
        items:
          type: 'object'
          additionalProperties: false
          properties:
            type:
              type: 'string'
              enum: [
                'patch'
                'vendor_advisory'
                'third_party_advisory'
                'signature_source'
                'mitigation_procedure'
                'tool_configuration_description'
                'unknown']
              required: true
            lang:
              type: 'string'
              required: true
              pattern: /^[a-z]{2}(?:[a-z]{2})?$/i
            url:
              type: 'string'
              required: true
              format: 'url'
            source:
              type: 'string'
            title:
              type: 'string'
        uniqueItems: true
    }

  # Dynamic default values
  Object.defineProperty @schema.properties.date_created, 'default',
    get: ->
      new Date().toISOString()
  Object.defineProperty @schema.properties.date_updated, 'default',
    get: ->
      new Date().toISOString()

  @before 'create', helpers.authorize('admin')
  @before 'update', helpers.authorize('admin')
  @before 'destroy', helpers.authorize('admin')

  @after 'create', helpers.upload('data')
  @after 'update', helpers.upload('data')
  
  @after 'create', helpers.index('data')
  @after 'update', helpers.index('data')

  @after 'update', helpers.invalidate('data')
  
  # Can't invalidate or unindex after destroy, as the after method does not receive the resource

  # Define stored filters (avoid temporary views)
  @filter 'all', {}

Vulnerability.prototype.buildIndexDocument = ->
  components = CPEURI.generateUniqueComponentLists @cpe
  componentValues = []
  for key, value of components
    componentValues = componentValues.concat(value)

  doc = {
    docid: helpers.prefixResourceId @
    fields:
      text: @summary + ' ' + componentValues.join(' ')
      timestamp: new Date(@date_updated).getTime() * 0.001
    variables:
      0: @cvss?.score
    categories:
      type: @resource.toLowerCase()
      cwe: @cwe
      cpe: CPEURI.generateUniqueAncestors @cpe
      access_vector: @cvss?.access_vector
      access_complexity: @cvss?.access_complexity
      authentication: @cvss?.authentication
      confidentiality_impact: @cvss?.confidentiality_impact
      integrity_impact: @cvss?.integrity_impact
      availability_impact: @cvss?.availability_impact
  }
  util.mixin doc.categories, components
  return doc
  